# This tells the terminal to use bash as the interpreter
#!/bin/bash
# This is a comment. The heading of the script must include
# instructions to the scheduler. The arguments begin with #PBS and
# the options
# First we need to stablish the name of the queue we will utilize.
# For example if we need 8 intel processors and 64GB or RAM for one week in one node.
#PBS -l nodes=1:ppn=8
#PBS -l mem=32gb
#PBS -l walltime=00:01:00:00
#PBS -M df.forero10@uniandes.edu.co
#PBS -m abe
#PBS -N sun_test
#PBS -j oe
#PBS -o v02_cluster_test.txt

# Create a temporary directory locally on the node optimizes I/O performance
TEMP_DIR=/state/partition1/$USER/$PBS_JOBNAME.$PBS_JOBID
# Create the directory to store the computation output. For example
# results inside the working directory.
OUT_DIR=$PBS_O_WORKDIR/results


mkdir -p $TEMP_DIR
mkdir -p $OUT_DIR
cp -Rf $PBS_O_WORKDIR/uandino_v02.cpp $TEMP_DIR/.
cp -Rf $PBS_O_WORKDIR/uandino_v02.o $TEMP_DIR/.






module load openmpi
module load gcc
module load libs/gsl


#Run the stuff
cd $TEMP_DIR
g++ -fopenmp -o uandino_v02.o uandino_v02.cpp `gsl-config --cflags --libs`

./uandino_v02.o

mv probsTest.csv $OUT_DIR
mv potentialTest.csv $OUT_DIR

cd $OUT_DIR
mv -f $TEMP_DIR ./
